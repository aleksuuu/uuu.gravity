{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 8,
			"minor" : 6,
			"revision" : 0,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"classnamespace" : "dsp.gen",
		"rect" : [ 34.0, 100.0, 1135.0, 809.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 1,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 0,
		"toptoolbarpinned" : 0,
		"righttoolbarpinned" : 0,
		"bottomtoolbarpinned" : 0,
		"toolbars_unpinned_last_save" : 0,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "",
		"assistshowspatchername" : 0,
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 924.0, 591.0, 35.0, 22.0 ],
					"text" : "out 2"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-3",
					"linecount" : 4,
					"maxclass" : "comment",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 490.0, 101.0, 150.0, 60.0 ],
					"text" : "https://physics.stackexchange.com/questions/256468/model-formula-for-bouncing-ball"
				}

			}
, 			{
				"box" : 				{
					"code" : "require \"pitchshift.genexpr\"\r\n\r\ngetTap(index, delObj, timesBuf, ampsBuf, loudnessMode, pitchshiftWindow, pitchshiftBlur) {\r\n\tdelTime = peek(timesBuf, index);\r\n\tif(delTime) {\r\n\t\tamp = 1;\r\n\t\tif (loudnessMode == 0) {\r\n\t\t\tamp = peek(ampsBuf, index);\r\n\t\t} else if (loudnessMode == 1) {\r\n\t\t\tamp = peek(ampsBuf, dim(ampsBuf) - index - 1);\r\n\t\t}\r\n\t\treturn delObj.read(delTime) * amp;\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nParam pitchshift_window_size(100,min=0.1,max=1000);\r\n\r\nParam pitchshift_blur(0.15,min=0,max=0.25);\r\n\r\nParam max_delay_in_seconds(10,min=1,max=20);\r\n\r\nParam pan_mode(0,min=0,max=4); // no panning, pingpong, l to r, pingpong r to l, l to r, r to l\r\n\r\nParam pan_rand(0,min=0,max=1); // how randomized panning should be\r\n\r\nParam loudness_mode(0,min=0,max=2); // normal, reverse (soft to loud), constant\r\n\r\nBuffer delayTimes;\r\n\r\nBuffer delayAmps;\r\n\r\nDelay delay_obj(SAMPLERATE*max_delay_in_seconds);\r\n\r\nHistory randL(1);\r\nHistory randR(1);\r\n\r\n\r\n\r\noutputL = 0;\r\noutputR = 0;\r\n\r\nnum_taps = dim(delayTimes);\r\n\r\nif(pan_mode==0) {\r\n\tfor(tap=0; tap <= num_taps; tap+=1) {\r\n\t\toutputL += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur);\r\n\t}\r\n\toutputL *= 0.5;\r\n\toutputR = outputL;\r\n} else if(pan_mode==1) { // pingpong left to right\r\n\tfor(tap=0; tap <= num_taps; tap+=1) {\r\n\t\tif (tap%2) {\r\n\t\t\toutputR += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur);\r\n\t\t} else {\r\n\t\t\toutputL += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur);\r\n\t\t}\r\n\t}\t\r\n} else if(pan_mode==2) { // pingpong right to left\r\n\tfor(tap=0; tap <= num_taps; tap+=1) {\r\n\t\tif (tap%2) {\r\n\t\t\toutputL += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur);\r\n\t\t} else {\r\n\t\t\toutputR += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur);\r\n\t\t}\r\n\t}\t\r\n} else if(pan_mode==3) { // left to right\r\n\tfor(tap=0; tap <= num_taps; tap+=1) {\r\n\t\toutputL += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur) * (1-tap/num_taps);\r\n\t\toutputR += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur) * (tap/num_taps);\r\n\t}\t\r\n} else if(pan_mode==4) { // right to left\r\n\tfor(tap=0; tap <= num_taps; tap+=1) {\r\n\t\toutputL += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur) * (tap/num_taps);\r\n\t\toutputR += getTap(tap, delay_obj, delayTimes, delayAmps, loudness_mode, pitchshift_window_size, pitchshift_blur) * (1-tap/num_taps);\r\n\t}\t\r\n}\r\n\r\nstep_size = 0.01;\r\nrandPanFactorL = randL + noise() * pan_rand * step_size;\r\nrandPanFactorL = clip(randPanFactorL, 1-pan_rand, 1+pan_rand);\r\nrandL = randPanFactorL;\r\nrandPanFactorR = randR + noise() * pan_rand * step_size;\r\nrandPanFactorR = clip(randPanFactorL, 1-pan_rand, 1+pan_rand);\r\nrandR = randPanFactorR;\r\n\r\nout1 = outputL * randPanFactorL;\r\nout2 = outputR * randPanFactorR;\r\ndelay_obj.write(in1);",
					"fontface" : 0,
					"fontname" : "<Monospaced>",
					"fontsize" : 12.0,
					"id" : "obj-6",
					"maxclass" : "codebox",
					"numinlets" : 1,
					"numoutlets" : 2,
					"outlettype" : [ "", "" ],
					"patching_rect" : [ 50.0, 167.0, 893.0, 394.0 ]
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 50.0, 135.0, 28.0, 22.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 50.0, 588.0, 35.0, 22.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-6", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"source" : [ "obj-6", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-6", 1 ]
				}

			}
 ]
	}

}
