get_delay_time_and_amp(hist, blur, offset, no_click_phasor, window_size_samps) {
    rand_num = abs(noise()) * blur;
    no_click_rand_num = (hist + no_click_phasor + offset) % 1;
    sah_ctl = delta(no_click_rand_num);
    hist = sah(no_click_rand_num, sah_ctl, 0); // update blur at phasor loop to prevent clicks
    amp = pow(cos((no_click_rand_num - 0.5) * PI), 2);
    delay_time = sah(window_size_samps, sah_ctl, 0) * no_click_rand_num;
    return delay_time, amp;
}

pitchshift(input, shift_amt, window_size, blur) {
    Delay pitchshift_delay_obj(88200);
    History hist1(0);
    History hist2(0);
    History hist3(0);
    History hist4(0);
    window_size_samps = mstosamps(window_size);
    no_click_phasor = phasor((1 - shift_amt) * 1000 / window_size); 
    output = 0;
    // for (i = 0; i < 4; i += 1) {
    //     delay_time, amp = get_delay_time_and_amp(hist1, blur, i * 0.25, no_click_phasor, window_size_samps);
    //     output += (pitchshift_delay_obj.read(delay_time) * amp);
    // }
    delay_time, amp = get_delay_time_and_amp(hist1, blur, 0, no_click_phasor, window_size_samps);
    output += (pitchshift_delay_obj.read(delay_time) * amp);
    delay_time, amp = get_delay_time_and_amp(hist2, blur, 0.25, no_click_phasor, window_size_samps);
    output += (pitchshift_delay_obj.read(delay_time) * amp);
    delay_time, amp = get_delay_time_and_amp(hist3, blur, 0.5, no_click_phasor, window_size_samps);
    output += (pitchshift_delay_obj.read(delay_time) * amp);
    delay_time, amp = get_delay_time_and_amp(hist4, blur, 0.75, no_click_phasor, window_size_samps);
    output += (pitchshift_delay_obj.read(delay_time) * amp);
    pitchshift_delay_obj.write(input);
    return output;

    // return window_size_samps, no_click_phasor;
    //return 1, 2;
    // rand_blur1 = abs(noise()) * blur;
    // sah_ctl = delta((hist1 + no_click_phasor) % 1);
    // his1 = sah(tmp, blur_sah_ctl, 0); // update blur at phasor loop to prevent clicks
}